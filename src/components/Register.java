package components;/** * @authors Ashwini Prabhu, Rajat Vij, Rahul Dhamnani, Xiobei Yu, Anirudh Pandey * This class simulates the all types of Registers * If the register needs to be displayed on the Console then a boolean value must be set as true * A text box and Deposit button are added to load Register directly * The purpose of this Deposit button is to make testing easier. */import java.awt.Color;import java.awt.Component;import java.util.HashMap;import javax.swing.*;public class Register extends javax.swing.JPanel {	int bitLength;	String name, value;	boolean visible;	private javax.swing.JRadioButton jrb;	private javax.swing.JLabel lblName;	private javax.swing.JLabel lblValue;	private javax.swing.JTextField txtDeposit;	private javax.swing.JButton btnDeposit;	private HashMap componentMap;	/**	 * This constructor instantiates a new register	 * 	 * @param name	 *            The name of the register; can be GPR1, IX2	 * @param bitLength	 *            The size of the register. 20 bits for GPRs, 13 bits for XRs	 * @param visible	 *            If register will be showed on the GUI, this must be set as	 *            True	 */	public Register(String name, int bitLength, boolean visible) {		this.bitLength = bitLength;		this.name = name;		this.visible = visible;		if (this.visible) {			componentMap = new HashMap<String, Component>();			initializeComponents();		}	}	public Register() {		initializeComponents();	}	public void setRegName(String strName) {		lblName.setText(strName);		this.name = strName;	}	public void setBitLength(int l_bitLength) {		this.bitLength = l_bitLength;	}	public void setVisible(boolean l_visible) {		this.visible = l_visible;	}	/**	 * Method loads a value to registers.	 */	public void set(String value) {		this.value = (this.bitLength - value.length() > 0) ? String.format("%0"				+ (this.bitLength - value.length()) + "d", 0)				+ value : value.substring(value.length() - bitLength,				value.length());		if (this.visible)			showRadioBoxes();	}	/**	 * Method function returns the content of register	 */	public String get() {		return this.value;	}	/**	 * Method reads the value register holds and set the associated radio boxes	 */	public void showRadioBoxes() {		lblValue.setText(String.format("%s", Integer.parseInt(this.value, 2)));		for (int i = 0; i < this.bitLength; i++)			getComponentByName("jRB" + String.format("%s", i + 1)).setSelected(					(this.value.charAt(i) != '0'));	}	/**	 * This function places the component on the GUI Switches (radio buttons)	 * are placed automatically according to register bit length	 */	public void initializeComponents() {		lblName = new JLabel();		lblValue = new JLabel();		txtDeposit = new JTextField();		btnDeposit = new javax.swing.JButton("Deposit");		lblValue.setForeground(Color.red);		this.add(lblName);		for (int i = 1; i <= this.bitLength; i++) {			jrb = new JRadioButton();			jrb.setName("jRB" + i);			jrb.setVisible(true);			this.add(jrb);			componentMap.put(jrb.getName(), jrb);		}		this.add(lblValue);		lblName.setText(name);		lblValue.setText("VALUE");		this.add(txtDeposit);		this.add(btnDeposit);		txtDeposit.setColumns(2);		btnDeposit.addActionListener(new java.awt.event.ActionListener() {			public void actionPerformed(java.awt.event.ActionEvent evt) {				btnDepositActionPerformed(evt);			}		});	}	/**	 * Method is added to make test easier The value of the textbox is deposit	 * directly on the register while this action is performed	 */	private void btnDepositActionPerformed(java.awt.event.ActionEvent evt) {		String userInput = txtDeposit.getText();		int userInputInt = Integer.parseInt(userInput);		String userInputBinary = Long.toBinaryString(userInputInt);		this.set(userInputBinary);	}	/**	 * Method finds the radio button to be selected	 * 	 * @param name	 *            The name of the radio button	 */	public JRadioButton getComponentByName(String name) {		if (componentMap.containsKey(name)) {			return (JRadioButton) componentMap.get(name);		} else			return null;	}		public void setSignBit(String l_sign)	  {	    value = (l_sign + value.substring(1, bitLength));	    if (visible) {	      showRadioBoxes();	    }	  }	  	  public void setBit(int l_bit, String l_value)	  {	    int registerlength = bitLength;	    	    String changedString = "";	    if (l_bit == 0) {	      changedString = l_value + get().substring(1, registerlength);	    } else if (l_bit == bitLength) {	      changedString = get().substring(0, registerlength - 1) + l_value;	    } else {	      changedString = get().substring(0, l_bit - 1) + l_value + get().substring(l_bit, registerlength);	    }	    set(changedString);	  }	  public int getValue(int Bit)	  {	    return Integer.parseInt(this.value.substring(this.value.length() - Bit, this.value.length() - Bit + 1));	  }/*	public void set(String[] value) {		this.value = (String) ((this.bitLength - value.length > 0) ? String.format("%0"				+ (this.bitLength - value.length) + "d", 0)				+ value : value.length);		if (this.visible)			showRadioBoxes();			}*/}